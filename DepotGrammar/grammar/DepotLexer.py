# Generated from DepotLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,147,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,100,8,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,5,14,125,8,14,10,
        14,12,14,128,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,4,16,137,8,
        16,11,16,12,16,138,1,17,4,17,142,8,17,11,17,12,17,143,1,17,1,17,
        0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,1,0,4,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,12,13,32,32,153,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,
        1,0,0,0,7,43,1,0,0,0,9,45,1,0,0,0,11,51,1,0,0,0,13,59,1,0,0,0,15,
        68,1,0,0,0,17,76,1,0,0,0,19,85,1,0,0,0,21,99,1,0,0,0,23,101,1,0,
        0,0,25,111,1,0,0,0,27,120,1,0,0,0,29,122,1,0,0,0,31,129,1,0,0,0,
        33,136,1,0,0,0,35,141,1,0,0,0,37,38,5,44,0,0,38,2,1,0,0,0,39,40,
        5,58,0,0,40,4,1,0,0,0,41,42,5,123,0,0,42,6,1,0,0,0,43,44,5,125,0,
        0,44,8,1,0,0,0,45,46,5,68,0,0,46,47,5,69,0,0,47,48,5,80,0,0,48,49,
        5,79,0,0,49,50,5,84,0,0,50,10,1,0,0,0,51,52,5,83,0,0,52,53,5,69,
        0,0,53,54,5,67,0,0,54,55,5,84,0,0,55,56,5,73,0,0,56,57,5,79,0,0,
        57,58,5,78,0,0,58,12,1,0,0,0,59,60,5,83,0,0,60,61,5,69,0,0,61,62,
        5,67,0,0,62,63,5,84,0,0,63,64,5,73,0,0,64,65,5,79,0,0,65,66,5,78,
        0,0,66,67,5,83,0,0,67,14,1,0,0,0,68,69,5,80,0,0,69,70,5,82,0,0,70,
        71,5,79,0,0,71,72,5,68,0,0,72,73,5,85,0,0,73,74,5,67,0,0,74,75,5,
        84,0,0,75,16,1,0,0,0,76,77,5,67,0,0,77,78,5,65,0,0,78,79,5,84,0,
        0,79,80,5,69,0,0,80,81,5,71,0,0,81,82,5,79,0,0,82,83,5,82,0,0,83,
        84,5,89,0,0,84,18,1,0,0,0,85,86,5,85,0,0,86,87,5,78,0,0,87,88,5,
        73,0,0,88,89,5,84,0,0,89,20,1,0,0,0,90,91,5,112,0,0,91,100,5,99,
        0,0,92,93,5,107,0,0,93,100,5,103,0,0,94,100,2,108,109,0,95,96,5,
        109,0,0,96,100,5,50,0,0,97,98,5,109,0,0,98,100,5,51,0,0,99,90,1,
        0,0,0,99,92,1,0,0,0,99,94,1,0,0,0,99,95,1,0,0,0,99,97,1,0,0,0,100,
        22,1,0,0,0,101,102,5,69,0,0,102,103,5,77,0,0,103,104,5,80,0,0,104,
        105,5,76,0,0,105,106,5,79,0,0,106,107,5,89,0,0,107,108,5,69,0,0,
        108,109,5,69,0,0,109,110,5,83,0,0,110,24,1,0,0,0,111,112,5,69,0,
        0,112,113,5,77,0,0,113,114,5,80,0,0,114,115,5,76,0,0,115,116,5,79,
        0,0,116,117,5,89,0,0,117,118,5,69,0,0,118,119,5,69,0,0,119,26,1,
        0,0,0,120,121,5,47,0,0,121,28,1,0,0,0,122,126,7,0,0,0,123,125,7,
        1,0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,
        0,0,0,127,30,1,0,0,0,128,126,1,0,0,0,129,130,3,33,16,0,130,131,3,
        27,13,0,131,132,3,33,16,0,132,133,3,27,13,0,133,134,3,33,16,0,134,
        32,1,0,0,0,135,137,7,2,0,0,136,135,1,0,0,0,137,138,1,0,0,0,138,136,
        1,0,0,0,138,139,1,0,0,0,139,34,1,0,0,0,140,142,7,3,0,0,141,140,1,
        0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,145,1,
        0,0,0,145,146,6,17,0,0,146,36,1,0,0,0,5,0,99,126,138,143,1,6,0,0
    ]

class DepotLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMA = 1
    COLON = 2
    LCURLY = 3
    RCURLY = 4
    DEPOT = 5
    SECTION = 6
    SECTIONS = 7
    PRODUCT = 8
    CATEGORY = 9
    UNIT = 10
    UNIT_NAME = 11
    EMPLOYEES = 12
    EMPLOYEE = 13
    DATE_SEP = 14
    ID = 15
    DATE = 16
    INT = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "':'", "'{'", "'}'", "'DEPOT'", "'SECTION'", "'SECTIONS'", 
            "'PRODUCT'", "'CATEGORY'", "'UNIT'", "'EMPLOYEES'", "'EMPLOYEE'", 
            "'/'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "COLON", "LCURLY", "RCURLY", "DEPOT", "SECTION", "SECTIONS", 
            "PRODUCT", "CATEGORY", "UNIT", "UNIT_NAME", "EMPLOYEES", "EMPLOYEE", 
            "DATE_SEP", "ID", "DATE", "INT", "WS" ]

    ruleNames = [ "COMMA", "COLON", "LCURLY", "RCURLY", "DEPOT", "SECTION", 
                  "SECTIONS", "PRODUCT", "CATEGORY", "UNIT", "UNIT_NAME", 
                  "EMPLOYEES", "EMPLOYEE", "DATE_SEP", "ID", "DATE", "INT", 
                  "WS" ]

    grammarFileName = "DepotLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


